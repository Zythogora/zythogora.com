model Users {
  id       String @id
  username String @unique

  betterAuthUser BetterAuthUsers @relation(fields: [id], references: [id], onDelete: Cascade)

  reviews Reviews[]

  friendWith   Friends[] @relation("friendships_user_a")
  befriendedBy Friends[] @relation("friendships_user_b")

  friendRequestsSent    FriendRequests[] @relation("friend_requests_requester")
  friendRequestReceived FriendRequests[] @relation("friend_requests_addressee")

  createdBeers Beers[] @relation("created_beers")
  updatedBeers Beers[] @relation("updated_beers")

  createdBreweries Breweries[] @relation("created_breweries")
  updatedBreweries Breweries[] @relation("updated_breweries")

  @@map("users")
  @@schema("public")
}

model Reviews {
  id                   String                @id @default(nanoid())
  slug                 String
  globalScore          Decimal               @map("global_score") @db.Decimal(3, 1)
  servingFrom          ServingFrom           @map("serving_from")
  bestBeforeDate       DateTime?             @map("best_before_date") @db.Date
  comment              String?
  pictureUrl           String?               @map("picture_url")
  labelDesign          LabelDesign?          @map("label_design")
  haziness             Haziness?
  headRetention        HeadRetention?        @map("head_retention")
  aromasIntensity      AromasIntensity?      @map("aromas_intensity")
  flavorsIntensity     FlavorsIntensity?     @map("flavors_intensity")
  bodyStrength         BodyStrength?         @map("body_strength")
  carbonationIntensity CarbonationIntensity? @map("carbonation_intensity")
  bitterness           Bitterness?
  acidity              Acidity?
  duration             Duration?

  beerId String @map("beer_id")
  beer   Beers  @relation(fields: [beerId], references: [id])

  userId String @map("user_id")
  user   Users  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([slug, userId])
  @@map("reviews")
  @@schema("public")
}

model Friendships {
  id    String   @id @default(nanoid())
  since DateTime @default(now())

  friends Friends[]

  @@map("friendships")
  @@schema("public")
}

model Friends {
  friendshipId String      @map("friendship_id")
  friendship   Friendships @relation(fields: [friendshipId], references: [id], onDelete: Cascade)

  userAId String @map("user_a_id")
  userA   Users  @relation("friendships_user_a", fields: [userAId], references: [id], onDelete: Cascade)

  userBId String @map("user_b_id")
  userB   Users  @relation("friendships_user_b", fields: [userBId], references: [id], onDelete: Cascade)

  @@unique([friendshipId, userAId])
  @@unique([friendshipId, userBId])
  @@map("friends")
  @@schema("public")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED

  @@map("friend_request_status")
  @@schema("public")
}

model FriendRequests {
  id     String              @id @default(nanoid())
  sentAt DateTime            @default(now()) @map("sent_at")
  status FriendRequestStatus @default(PENDING)

  requesterId String @map("requester_id")
  requester   Users  @relation("friend_requests_requester", fields: [requesterId], references: [id], onDelete: Cascade)

  addresseeId String @map("addressee_id")
  addressee   Users  @relation("friend_requests_addressee", fields: [addresseeId], references: [id], onDelete: Cascade)

  updatedAt DateTime? @updatedAt @map("updated_at")

  @@unique([requesterId, addresseeId])
  @@map("friend_requests")
  @@schema("public")
}
